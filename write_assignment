<?php
session_start();

if (!isset($_SESSION['student_logged_in']) || $_SESSION['student_logged_in'] !== true) {
header("Location: student_login.php");
exit;
}

$student_id = $_SESSION['student_id'];
$student_name = $_SESSION['student_name'];
?>

<!DOCTYPE html>
<html>
<head>
<title>Write Assignment</title>
<style>
body {
overflow-y: scroll;
margin: 0;
padding: 0;
}

.editor-container {
display: flex;
flex-direction: column;
width: 80%;
margin: 20px auto;
border: 1px solid #ccc;
padding: 10px;
border-radius: 5px;
}

.menu-bar {
display: flex;
margin-bottom: 10px;
gap: 10px;
}

.menu-bar button {
padding: 8px 15px;
border: none;
background-color: #eee;
cursor: pointer;
border-radius: 3px;
font-size: 14px;
}

.menu-bar button:hover {
background-color: #ddd;
}

.dropdown {
position: relative;
display: inline-block;
}

.dropdown-content {
display: none;
position: absolute;
background-color: #f9f9f9;
min-width: 180px;
max-height: 200px;
overflow-y: auto;
box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);
z-index: 1;
border-radius: 3px;
border: 1px solid #ccc;
}

.dropdown-content a {
color: black;
padding: 12px 16px;
text-decoration: none;
display: block;
font-size: 14px;
}

.dropdown-content a:hover {
background-color: #ddd;
}

.dropdown:hover .dropdown-content {
display: block;
}

.toolbar {
display: flex;
margin-bottom: 10px;
gap: 5px;
}

.toolbar button {
padding: 8px;
border: none;
background-color: #eee;
cursor: pointer;
border-radius: 3px;
font-size: 14px;
}

.toolbar button:hover {
background-color: #ddd;
}

#assignment-text {
flex: 1;
padding: 10px;
border: 1px solid #ddd;
border-radius: 5px;
font-size: 14px;
line-height: 1.5;
min-height: 300px;
overflow-y: scroll;
max-height: 500px;
position: relative;
white-space: pre-wrap; /* Add this */
word-break: break-word;
}

#assignment-text:empty:before {
content: attr(placeholder);
color: #ccc;
}

.strikethrough-icon {
position: relative;
display: inline-block;
width: 16px;
height: 16px;
}

.strikethrough-icon::before {
content: "";
position: absolute;
top: 50%;
left: 0;
right: 0;
height: 1px;
background-color: black;
transform: translateY(-50%);
}
#table-picker {
position: absolute;
top: 100%;
left: 0;
background-color: #fff;
border: 1px solid #ccc;
box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
display: none;
z-index: 2;
}

#table-picker td {
width: 20px;
height: 20px;
border: 1px solid #ddd;
padding: 0;
cursor: pointer;
background-color: #fff;
}

#table-picker td:hover {
background-color: #f0f0f0;
}
#insert-menu {
position: relative;
}

/* Modal Styles */
.modal {
display: none;
position: fixed;
z-index: 1000;
left: 0;
top: 0;
width: 100%;
height: 100%;
overflow: auto;
background-color: rgba(0,0,0,0.5);
}

.modal-content {
background-color: #fefefe;
margin: 10% auto;
padding: 20px;
border: 1px solid #888;
width: 300px;
border-radius: 5px;
box-shadow: 0 4px 8px rgba(0,0,0,0.2);
position: relative;
}

.modal-header {
display: flex;
justify-content: space-between;
align-items: center;
margin-bottom: 15px;
border-bottom: 1px solid #ddd;
padding-bottom: 10px;
}

.modal-header h2 {
margin: 0;
font-size: 18px;
}

.close-button {
position: absolute;
top: 10px;
right: 10px;
color: #aaa;
font-size: 28px;
font-weight: bold;
cursor: pointer;
}

.close-button:hover,
.close-button:focus {
color: #000;
text-decoration: none;
}


.modal-body {
margin-bottom: 15px;
}

.modal-body label {
display: block;
margin-bottom: 5px;
font-size: 14px;
}

.modal-body input {
width: 100%;
padding: 8px 10px;
border: 1px solid #ddd;
border-radius: 3px;
box-sizing: border-box;
font-size: 14px;
}

.modal-footer {
text-align: right;
}

.modal-footer button {
padding: 8px 15px;
border: none;
background-color: #4CAF50;
color: white;
border-radius: 3px;
cursor: pointer;
font-size: 14px;
}

.modal-footer button:hover {
background-color: #367c39;
}
.modal-footer button:disabled{
background-color: #cccccc;
color: #666666;
cursor: not-allowed;
}

/* Table Styles */
#assignment-text table {
width: 100%;
border-collapse: collapse;
border: 1px solid black;
margin-bottom: 20px;
table-layout: fixed;
position: relative; /* Make sure the table is a positioning context */
}

#assignment-text table td,
#assignment-text table th {
border: 1px solid black;
padding: 8px;
word-break: break-word;
}

#assignment-text table th {
background-color: #f0f0f0;
}

/* Table Controls */
.table-controls {
display: flex;
gap: 10px;
padding: 5px;
background-color: rgba(255, 255, 255, 0.7);
border-radius: 5px;
z-index: 10;
position: relative;
top: -25px;
margin-bottom: -20px;
}

#assignment-text table + .table-controls {
margin-top: -25px;
margin-bottom: -20px;
}

.table-controls button {
padding: 5px 10px;
border: 1px solid #ccc;
border-radius: 3px;
background-color: #eee;
cursor: pointer;
font-size: 12px;
}

.table-controls button:hover {
background-color: #ddd;
}

.delete-table-btn {
margin-top: 10px;
text-align: center;
}
.delete-table-btn button{
padding: 5px 10px;
border: 1px solid #ccc;
border-radius: 3px;
background-color: #eee;
cursor: pointer;
font-size: 12px;
}
.delete-table-btn button:hover {
background-color: #ddd;
}

.selected-row {
background-color: rgba(0, 123, 255, 0.1);
}

.selected-column {
background-color: rgba(0, 123, 255, 0.1);
}

.delete-table-button {
position: absolute;
top: 5px;
right: 5px;
cursor: pointer;
font-size: 16px; /* Adjust size as needed */
color: #ff0000; /* red */
line-height: 0; /* Vertically center the 'x' */
padding: 0; /* Remove extra padding */
border: none;
background: none;
}

.delete-table-button:hover {
color: #cc0000;
}

</style>
</head>
<body>
<div class="editor-container">
<div class="menu-bar">
<button onclick="showHomeMenu()">Home</button>
<button onclick="showInsertMenu()">Insert</button>
<button onclick="showDesignMenu()">Design</button>
</div>

<div id="home-menu" class="toolbar" style="display: none;">
<div class="dropdown">
<button>Text Size</button>
<div class="dropdown-content">
<a href="#" onclick="formatText('fontSize', '2')">2</a>
<a href="#" onclick="formatText('fontSize', '4')">4</a>
<a href="#" onclick="formatText('fontSize', '6')">6</a>
<a href="#" onclick="formatText('fontSize', '8')">8</a>
</div>
</div>
<div class="dropdown">
<button>Font Style</button>
<div class="dropdown-content">
<a href="#" onclick="formatText('fontName', 'Agency FB')">Agency FB</a>
<a href="#" onclick="formatText('fontName', 'Algerian')">Algerian</a>
<a href="#" onclick="formatText('fontName', 'Aptos')">Aptos</a>
<a href="#" onclick="formatText('fontName', 'Arial')">Arial</a>
<a href="#" onclick="formatText('fontName', 'Arial Black')">Arial Black</a>
<a href="#" onclick="formatText('fontName', 'Aptos Display')">Aptos Display</a>
<a href="#" onclick="formatText('fontName', 'Aptos Narrow')">Aptos Narrow</a>
<a href="#" onclick="formatText('fontName', 'Arial Narrow')">Arial Narrow</a>
<a href="#" onclick="formatText('fontName', 'Arial Rounded MT Bold')">Arial Rounded MT Bold</a>
<a href="#" onclick="formatText('fontName', 'Bahnschrift')">Bahnschrift</a>
<a href="#" onclick="formatText('fontName', 'Bahnschrift Condensed')">Bahnschrift Condensed</a>
<a href="#" onclick="formatText('fontName', 'Bahnschrift Light')">Bahnschrift Light</a>
<a href="#" onclick="formatText('fontName', 'Bahnschrift Light Condensed')">Bahnschrift Light Condensed</a>
<a href="#" onclick="formatText('fontName', 'Bahnschrift Light SemiCondensed')">Bahnschrift Light SemiCondensed</a>
<a href="#" onclick="formatText('fontName', 'Bahnschrift SemiBold')">Bahnschrift SemiBold</a>
<a href="#" onclick="formatText('fontName', 'Bahnschrift SemiBold Condensed')">Bahnschrift SemiBold Condensed</a>
<a href="#" onclick="formatText('fontName', 'Bahnschrift SemiBold SemiCondensed')">Bahnschrift SemiBold SemiCondensed</a>
<a href="#" onclick="formatText('fontName', 'Bahnschrift SemiCondensed')">Bahnschrift SemiCondensed</a>
<a href="#" onclick="formatText('fontName', 'Bahnschrift SemiLight')">Bahnschrift SemiLight</a>
<a href="#" onclick="formatText('fontName', 'Bahnschrift SemiLight Condensed')">Bahnschrift SemiLight Condensed</a>
<a href="#" onclick="formatText('fontName', 'Blackadder ITC')">Blackadder ITC</a>
<a href="#" onclick="formatText('fontName', 'Calibri')">Calibri</a>
<a href="#" onclick="formatText('fontName', 'Cambria')">Cambria</a>
<a href="#" onclick="formatText('fontName', 'Candara')">Candara</a>
<a href="#" onclick="formatText('fontName', 'Century Gothic')">Century Gothic</a>
<a href="#" onclick="formatText('fontName', 'Comic Sans MS')">Comic Sans MS</a>
<a href="#" onclick="formatText('fontName', 'Constantia')">Constantia</a>
<a href="#" onclick="formatText('fontName', 'Corbel')">Corbel</a>
<a href="#" onclick="formatText('fontName', 'Elephant')">Elephant</a>
<a href="#" onclick="formatText('fontName', 'Franklin Gothic Medium')">Franklin Gothic Medium</a>
<a href="#" onclick="formatText('fontName', 'Garamond')">Garamond</a>
<a href="#" onclick="formatText('fontName', 'Georgia')">Georgia</a>
<a href="#" onclick="formatText('fontName', 'Gill Sans MT')">Gill Sans MT</a>
<a href="#" onclick="formatText('fontName', 'Lucida Sans Unicode')">Lucida Sans Unicode</a>
<a href="#" onclick="formatText('fontName', 'Palatino Linotype')">Palatino Linotype</a>
<a href="#" onclick="formatText('fontName', 'Segoe UI')">Segoe UI</a>
<a href="#" onclick="formatText('fontName', 'Tahoma')">Tahoma</a>
<a href="#" onclick="formatText('fontName', 'Times New Roman')">Times New Roman</a>
<a href="#" onclick="formatText('fontName', 'Trebuchet MS')">Trebuchet MS</a>
<a href="#" onclick="formatText('fontName', 'Verdana')">Verdana</a>
</div>
</div>
<button onclick="formatText('bold')"><b>B</b></button>
<button onclick="formatText('italic')"><i>I</i></button>
<button onclick="formatText('underline')"><u>U</u></button>
<button onclick="formatText('strikeThrough')"><span class="strikethrough-icon"></span></button>
<button onclick="formatText('textShadow', '0px 0px 1px black')">S</button>
</div>

<div id="insert-menu" class="toolbar" style="display: none;">
<button id="insert-table-button">Table</button>
<div id="table-picker"></div>
<button>Shapes</button>
<button>Graphs</button>
</div>
<div id="design-menu" class="toolbar" style="display: none;">
Design Menu
</div>

<div id="assignment-text" contenteditable="true" placeholder="Write your assignment here..."></div>
<div id="table-modal" class="modal">
<div class="modal-content">
<div class="modal-header">
<h2>Insert Table</h2>
<span class="close-button">&times;</span>
</div>
<div class="modal-body">
<label for="rows">Rows:</label>
<input type="number" id="rows" value="3" min="1">
<label for="cols">Columns:</label>
<input type="number" id="cols" value="3" min="1">
</div>
<div class="modal-footer">
<button id="insert-table-confirm">Insert</button>
</div>
</div>
</div>

</div>

<script>
function showHomeMenu() {
document.getElementById("home-menu").style.display = "flex";
document.getElementById("insert-menu").style.display = "none";
document.getElementById("design-menu").style.display = "none";
if (isTablePickerVisible) {
tablePicker.style.display = 'none';
isTablePickerVisible = false;
}
}

function showInsertMenu() {
document.getElementById("home-menu").style.display = "none";
document.getElementById("insert-menu").style.display = "flex";
document.getElementById("design-menu").style.display = "none";
if (isTablePickerVisible) {
tablePicker.style.display = 'none';
isTablePickerVisible = false;
}
}

function showDesignMenu() {
document.getElementById("home-menu").style.display = "none";
document.getElementById("insert-menu").style.display = "none";
document.getElementById("design-menu").style.display = "flex";
if (isTablePickerVisible) {
tablePicker.style.display = 'none';
isTablePickerVisible = false;
}
}

function formatText(command, value = null) {
document.getElementById('assignment-text').focus();
if (command === 'fontSize') {
document.execCommand(command, false, value + 'px');
} else if (command === 'textShadow') {
document.execCommand('styleWithCSS', false, true);
document.execCommand(command, false, value);
document.execCommand('styleWithCSS', false, false);
}
else {
document.execCommand(command, false, value);
}
}

let selectedRows = 0;
let selectedCols = 0;
let isTablePickerVisible = false;
let assignmentText = document.getElementById('assignment-text');
let tablePicker = document.getElementById('table-picker');
const tableModal = document.getElementById('table-modal');
const insertTableButton = document.getElementById('insert-table-button');
const closeModalButton = document.querySelector('.close-button');
const insertTableConfirmButton = document.getElementById('insert-table-confirm');
const rowsInput = document.getElementById('rows');
const colsInput = document.getElementById('cols');


insertTableButton.addEventListener('click', () => {
tableModal.style.display = 'block';
});

closeModalButton.addEventListener('click', () => {
tableModal.style.display = 'none';
});

insertTableConfirmButton.addEventListener('click', () => {
const rows = parseInt(rowsInput.value);
const cols = parseInt(colsInput.value);

if (rows > 0 && cols > 0) {
insertTable(rows, cols);
tableModal.style.display = 'none';
rowsInput.value = 3;
colsInput.value = 3;
} else {
alert("Please enter valid row and column numbers.");
}
});

function insertTable(rows, cols) {
console.log("insertTable", rows, cols);

try {
// 1. Create a table element.
let table = document.createElement('table');
table.style.width = "100%";
table.style.borderCollapse = "collapse";
table.style.border = "1px solid black";
table.style.tableLayout = "fixed";
table.classList.add('custom-table');

// 2. Create rows and cells.
for (let i = 0; i < rows; i++) {
let row = table.insertRow();
for (let j = 0; j < cols; j++) {
let cell = row.insertCell();
cell.style.border = "1px solid black";
cell.textContent = "";
cell.style.padding = "8px";
cell.style.wordBreak = "break-word";
cell.style.width = `${100 / cols}%`;
}
}
console.log("Table element:", table);

// 3. Append the table to the assignment text area.
assignmentText.appendChild(table);

// 4. Add table controls *before* the table
const controlsDiv = document.createElement('div');
controlsDiv.className = 'table-controls';
controlsDiv.innerHTML = `

`;
table.parentNode.insertBefore(controlsDiv, table);

// 5. Add the delete button.
const deleteButton = document.createElement('button');
deleteButton.className = 'delete-table-button';
deleteButton.innerHTML = '&times;'; // "x" character
deleteButton.addEventListener('click', function() {
// Remove the entire table when the button is clicked.
table.parentNode.removeChild(table);
});
table.parentNode.appendChild(deleteButton); // Append the button to the *parent* of the table

// 6. Check if it was inserted.
if (assignmentText.querySelector('table')) {
console.log("Table inserted successfully.");
} else {
console.error("Table insertion failed: Table element not found.");
}

} catch (error) {
console.error("Error inserting table:", error);
}
}
</script>
</body>
</html>
